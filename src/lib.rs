pub mod types;
pub mod utils;
pub mod constants;

use crate::types::quotes::{QuoteHeader, version_3::QuoteV3, version_4::QuoteV4};
use crate::types::VerifiedOutput;

use serde::{Serialize, Deserialize};
use serde_wasm_bindgen;
use wasm_bindgen::prelude::*;
use x509_parser::certificate::X509Certificate;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum VersionedQuote {
    V3(QuoteV3),
    V4(QuoteV4)
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ParsedQuoteOutput {
    pub version: u16,
    pub quote: VersionedQuote,
}

#[wasm_bindgen]
pub fn parse_v3_quote(raw_bytes: &[u8]) -> JsValue {
    let quote_v3 = QuoteV3::from_bytes(raw_bytes);
    serde_wasm_bindgen::to_value(&quote_v3).unwrap()
}

#[wasm_bindgen]
pub fn parse_v4_quote(raw_bytes: &[u8]) -> JsValue {
    let quote_v4 = QuoteV4::from_bytes(raw_bytes);
    serde_wasm_bindgen::to_value(&quote_v4).unwrap()
}

#[wasm_bindgen]
pub fn parse_quote(raw_bytes: &[u8]) -> JsValue {
    let header = QuoteHeader::from_bytes(&raw_bytes[0..48]);
    let parsed_quote_output = if header.version == 3 {
        let quote_v3 = QuoteV3::from_bytes(raw_bytes);
        ParsedQuoteOutput {
            version: header.version,
            quote: VersionedQuote::V3(quote_v3)
        }
    } else {
        let quote_v4 = QuoteV4::from_bytes(raw_bytes);
        ParsedQuoteOutput {
            version: header.version,
            quote: VersionedQuote::V4(quote_v4)
        }
    };
    serde_wasm_bindgen::to_value(&parsed_quote_output).unwrap()
}

#[wasm_bindgen]
pub fn parse_verified_output(verified_output_bytes: &[u8]) -> JsValue {
    let verified_output = VerifiedOutput::from_bytes(verified_output_bytes);
    serde_wasm_bindgen::to_value(&verified_output).unwrap()
}

#[wasm_bindgen]
pub fn locate_raw_quote_js(txn_data: &[u8], version: u16) -> JsValue {
    let located_quote = locate_raw_quote(txn_data, version);
    serde_wasm_bindgen::to_value(&located_quote).unwrap()
}

pub fn locate_raw_quote(txn_data: &[u8], version: u16) -> ParsedQuoteOutput {
    if version == 3 {
        let possible_quote_bytes_vec = find_possible_quote_bytes_vec(txn_data, 3);
        for possible_quote_bytes in possible_quote_bytes_vec {
            let result = std::panic::catch_unwind(|| {
                QuoteV3::from_bytes(&possible_quote_bytes)
            });
            // Currently we return the first matched quote, might not be accurate
            // It's better to do a double check by passing the verified output
            if let Ok(quote_v3) = result {
                return ParsedQuoteOutput {
                    version: version,
                    quote: VersionedQuote::V3(quote_v3),
                };
            }
        }
    } else if version == 4 {
        let possible_quote_bytes_vec = find_possible_quote_bytes_vec(txn_data, 4);
        for possible_quote_bytes in possible_quote_bytes_vec {
            let result = std::panic::catch_unwind(|| {
                QuoteV4::from_bytes(&possible_quote_bytes)
            });
            // Currently we return the first matched quote, might not be accurate
            // It's better to do a double check by passing the verified output
            if let Ok(quote_v4) = result {
                return ParsedQuoteOutput {
                    version: version,
                    quote: VersionedQuote::V4(quote_v4),
                }
            }
        }
    } else {
        panic!("Unsupported version: {}", version)
    }
    panic!("Unable to locate raw quote");
}

pub fn find_possible_quote_bytes_vec(txn_data: &[u8], version: u8) -> Vec<Vec<u8>> {
    let mut results: Vec<Vec<u8>> = Vec::new();
    for i in 0..txn_data.len() - 1 {
        if txn_data[i] == version && txn_data[i + 1] == 0 {
            let sub_slice = txn_data[i..].to_vec();
            results.push(sub_slice);
        }
    }
    results
}

#[cfg(test)]
mod tests {
    use crate::types::tcbinfo::{TcbInfoV2, TcbInfoV3};
    use crate::types::quotes::{version_4::QuoteV4, version_3::QuoteV3};
    use crate::types::collaterals::IntelCollateral;

    use crate::utils::cert::{hash_crl_keccak256, hash_x509_keccak256, parse_crl_der, parse_pem, parse_x509_der, verify_crl};
    use crate::utils::tcbinfo::{validate_tcbinfov2, validate_tcbinfov3};
    use crate::utils::quotes::{
        version_3::verify_quote_dcapv3, 
        version_4::verify_quote_dcapv4
    };

    // Pinned September 10th, 2024, 6:49am GMT
    // there's no need for constant sample collateral updates
    const PINNED_TIME: u64 = 1725950994;

    #[test]
    fn test_root_crl_verify() {
        let intel_sgx_root_ca = parse_x509_der(include_bytes!("../data/Intel_SGX_Provisioning_Certification_RootCA.cer"));
        let intel_sgx_root_ca_crl = parse_crl_der(include_bytes!("../data/intel_root_ca_crl.der"));

        assert!(verify_crl(&intel_sgx_root_ca_crl, &intel_sgx_root_ca));
    }

    #[test]
    fn test_tcbinfov3() {
        // let current_time = chrono::Utc::now().timestamp() as u64;

        let tcbinfov3_json = include_str!("../data/tcbinfov3_00806f050000.json");
        let tcbinfov3: TcbInfoV3 = serde_json::from_str(tcbinfov3_json).unwrap();
        let tcbinfov3_serialize = serde_json::to_string(&tcbinfov3).unwrap();
        assert!(tcbinfov3_serialize == tcbinfov3_json);

        let sgx_signing_cert_pem = &parse_pem(include_bytes!("../data/signing_cert.pem")).unwrap()[0];
        let sgx_signing_cert = parse_x509_der(&sgx_signing_cert_pem.contents);

        assert!(validate_tcbinfov3(&tcbinfov3, &sgx_signing_cert, PINNED_TIME));
    }

    #[test]
    fn test_tcbinfov2() {
        // let current_time = chrono::Utc::now().timestamp() as u64;

        let tcbinfov2_json = include_str!("../data/tcbinfov2.json");
        let tcbinfov2: TcbInfoV2 = serde_json::from_str(tcbinfov2_json).unwrap();
        let tcbinfov2_serialize = serde_json::to_string(&tcbinfov2).unwrap();
        assert!(tcbinfov2_serialize == tcbinfov2_json);

        let sgx_signing_cert_pem = &parse_pem(include_bytes!("../data/signing_cert.pem")).unwrap()[0];
        let sgx_signing_cert = parse_x509_der(&sgx_signing_cert_pem.contents);

        assert!(validate_tcbinfov2(&tcbinfov2, &sgx_signing_cert, PINNED_TIME));
    }

    #[test]
    fn test_quotev4() {
        let quotev4_slice = include_bytes!("../data/quote_tdx_00806f050000.dat");
        let quotev4 = QuoteV4::from_bytes(quotev4_slice);
        assert_eq!(quotev4.header.version, 4);
    }

    use super::*;
    #[test]
    fn test_locate_raw_quote_v3() {
        let txn_data = hex::decode("52053faf000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000012e0000000000000000000000000000000000000000000000000000000000000127e03000200000000000a000f00939a7233f79c4ca9940a0db3957f0607c8f68886f8461a60efde00f096c085f2000000000e0e100fffff0100000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000e7000000000000003e7830a35057b9938d0fd849d13e3d82dc4abba812f8ffebbbb3d0e5ff1dd661000000000000000000000000000000000000000000000000000000000000000060d7778210f93769ad6d1d26698df018f95d321fc64f750fdd286ed15882c58e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000533bdab5edb34c958d5ed0b9f950a158a9e65ec7153235568a113e5156253dd1f3fb78db20a37290a42e114a541ffe3d155263eeca10000086e9b219fbc8cd11e6bdaaf4999cb95a533a7aa78b3c21baa1370ecdd95ac4dfb739d0debd49677fbb6699b69f5b9dd8e02d7a99282435cd790aeaba4687366ef67b5ed7a420d0a5779985208c7acf8de59aeacade7f24cf0d247ae24f5d341a8cf47ab8751487a665c55830b59095d158a62df2c9401c7f5e19c78921ad29e20e0e100fffff0100000000000000000000000000000000000000000000000000000000000000000000000000000000001500000000000000e70000000000000096b347a64e5a045e27369c26e6dcda51fd7c850e9b3a3a79e718f43261dee1e400000000000000000000000000000000000000000000000000000000000000008c4f5775d796503e96137f77c68a829a0056ac8ded70140b081b094490c57bff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004abcdab784e9cf0f5eed7d11089612cb22276751e13562123db69577050a6cb70000000000000000000000000000000000000000000000000000000000000000bee21d238d4a5b88265be6459262e11c256b88bad5157d4e77d9eab16730c6618e851ce98025fd1065f4d78fa755f7eec3b3a46984fa7f3fe3c99750551a9dcc2000000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f0500620e00002d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d494945386a4343424a6967417749424167495554356c6a6756516436775163305532556f3668766b516e4b77554577436759494b6f5a497a6a3045417749770a634445694d434147413155454177775a535735305a577767553064594946424453794251624746305a6d397962534244515445614d42674741315545436777520a535735305a577767513239796347397959585270623234784644415342674e564241634d43314e68626e526849454e7359584a684d51737743515944565151490a44414a445154454c4d416b474131554542684d4356564d774868634e4d6a51774d7a497a4d5441784e6a45795768634e4d7a45774d7a497a4d5441784e6a45790a576a42774d534977494159445651514444426c4a626e526c624342545231676755454e4c49454e6c636e52705a6d6c6a5958526c4d526f77474159445651514b0a4442464a626e526c6243424462334a7762334a6864476c76626a45554d424947413155454277774c553246756447456751327868636d4578437a414a42674e560a4241674d416b4e424d517377435159445651514745774a56557a425a4d424d4742797147534d34394167454743437147534d34394177454841304941424e74360a4b7161764149587a3141686d64414a3339765847526b432f676d564350724261386b51436853385248377233676231787866314c5656664d634c5861477962590a6f76706b7642394a6472696a774f53665645536a67674d4f4d494944436a416642674e5648534d4547444157674253566231334e765276683655424a796454300a4d383442567776655644427242674e56485238455a4442694d47436758714263686c706f64485277637a6f764c32467761533530636e567a6447566b633256790a646d6c6a5a584d75615735305a577775593239744c334e6e6543396a5a584a3061575a7059324630615739754c33597a4c33426a61324e796244396a595431770a624746305a6d397962535a6c626d4e765a476c755a7a316b5a584977485159445652304f4242594546506b3877784b7a46797238736b49763246676e306e354c0a747751754d41344741315564447745422f775145417749477744414d42674e5648524d4241663845416a41414d4949434f77594a4b6f5a496876684e415130420a424949434c444343416967774867594b4b6f5a496876684e415130424151515156302b527a465552336b5879304131344b566c71316a434341575547436971470a534962345451454e41514977676746564d42414743797147534962345451454e415149424167454f4d42414743797147534962345451454e415149434167454f0a4d42414743797147534962345451454e41514944416745444d42414743797147534962345451454e41514945416745444d42454743797147534962345451454e0a41514946416749412f7a415242677371686b69472b4530424451454342674943415038774541594c4b6f5a496876684e4151304241676343415145774541594c0a4b6f5a496876684e4151304241676743415141774541594c4b6f5a496876684e4151304241676b43415141774541594c4b6f5a496876684e4151304241676f430a415141774541594c4b6f5a496876684e4151304241677343415141774541594c4b6f5a496876684e4151304241677743415141774541594c4b6f5a496876684e0a4151304241673043415141774541594c4b6f5a496876684e4151304241673443415141774541594c4b6f5a496876684e4151304241673843415141774541594c0a4b6f5a496876684e4151304241684143415141774541594c4b6f5a496876684e4151304241684543415130774877594c4b6f5a496876684e41513042416849450a4541344f4177502f2f7745414141414141414141414141774541594b4b6f5a496876684e4151304241775143414141774641594b4b6f5a496876684e415130420a4241514741474271414141414d41384743697147534962345451454e4151554b415145774867594b4b6f5a496876684e41513042426751515332344e7941564c0a305a514f6f4b6b3248645264346a424542676f71686b69472b453042445145484d4459774541594c4b6f5a496876684e4151304242774542416638774541594c0a4b6f5a496876684e4151304242774942415141774541594c4b6f5a496876684e4151304242774d4241514177436759494b6f5a497a6a304541774944534141770a52514968414f77516233563972364455427a73357256776541362b734a585451704435497661654a316b6338455844384169425935506b7677462b4b6a41464a0a7657622b76564c75454f6d53746c542f5a66686a46614239582b626a6c773d3d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949436c6a4343416a32674177494241674956414a567658633239472b487051456e4a3150517a7a674658433935554d416f4743437147534d343942414d430a4d476778476a415942674e5642414d4d45556c756447567349464e48574342536232393049454e424d526f77474159445651514b4442464a626e526c624342440a62334a7762334a6864476c76626a45554d424947413155454277774c553246756447456751327868636d4578437a414a42674e564241674d416b4e424d5173770a435159445651514745774a56557a4165467730784f4441314d6a45784d4455774d5442614677307a4d7a41314d6a45784d4455774d5442614d484178496a41670a42674e5642414d4d47556c756447567349464e4857434251513073675547786864475a76636d306751304578476a415942674e5642416f4d45556c75644756730a49454e76636e4276636d4630615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b474131554543417743513045780a437a414a42674e5642415954416c56544d466b77457759484b6f5a497a6a3043415159494b6f5a497a6a304441516344516741454e53422f377432316c58534f0a3243757a7078773734654a423732457944476757357258437478327456544c7136684b6b367a2b5569525a436e71523770734f766771466553786c6d546c4a6c0a65546d693257597a33714f42757a43427544416642674e5648534d4547444157674251695a517a575770303069664f44744a5653763141624f536347724442530a42674e5648523845537a424a4d45656752614244686b466f64485277637a6f764c324e6c636e52705a6d6c6a5958526c63793530636e567a6447566b633256790a646d6c6a5a584d75615735305a577775593239744c306c756447567355306459556d397664454e424c6d526c636a416442674e5648513445466751556c5739640a7a62306234656c4153636e553944504f4156634c336c517744675944565230504151482f42415144416745474d42494741315564457745422f7751494d4159420a4166384341514177436759494b6f5a497a6a30454177494452774177524149675873566b6930772b6936565947573355462f32327561586530594a446a3155650a6e412b546a44316169356343494359623153416d4435786b66545670766f34556f79695359787244574c6d5552344349394e4b7966504e2b0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949436a7a4343416a53674177494241674955496d554d316c71644e496e7a6737535655723951477a6b6e42717777436759494b6f5a497a6a3045417749770a614445614d4267474131554541777752535735305a5777675530645949464a766233516751304578476a415942674e5642416f4d45556c756447567349454e760a636e4276636d4630615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155454341774351304578437a414a0a42674e5642415954416c56544d423458445445344d4455794d5445774e4455784d466f58445451354d54497a4d54497a4e546b314f566f77614445614d4267470a4131554541777752535735305a5777675530645949464a766233516751304578476a415942674e5642416f4d45556c756447567349454e76636e4276636d46300a615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155454341774351304578437a414a42674e56424159540a416c56544d466b77457759484b6f5a497a6a3043415159494b6f5a497a6a3044415163445167414543366e45774d4449595a4f6a2f69505773437a61454b69370a314f694f534c52466857476a626e42564a66566e6b59347533496a6b4459594c304d784f346d717379596a6c42616c54565978465032734a424b357a6c4b4f420a757a43427544416642674e5648534d4547444157674251695a517a575770303069664f44744a5653763141624f5363477244425342674e5648523845537a424a0a4d45656752614244686b466f64485277637a6f764c324e6c636e52705a6d6c6a5958526c63793530636e567a6447566b63325679646d6c6a5a584d75615735300a5a577775593239744c306c756447567355306459556d397664454e424c6d526c636a416442674e564851344546675155496d554d316c71644e496e7a673753560a55723951477a6b6e4271777744675944565230504151482f42415144416745474d42494741315564457745422f7751494d4159424166384341514577436759490a4b6f5a497a6a3045417749445351417752674968414f572f35516b522b533943695344634e6f6f774c7550524c735747662f59693747535839344267775477670a41694541344a306c72486f4d732b586f356f2f7358364f39515778485241765a55474f6452513763767152586171493d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000cab8e5a07363bbafc2e964f378a04f5503620c8000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000004d0e30db000000000000000000000000000000000000000000000000000000000").unwrap();
        // println!("txn_data: {:?}", txn_data);
        let version = 3;
        let parsed_quote = locate_raw_quote(&txn_data, version);
        println!("locate_raw_quote: {:?}", parsed_quote);
    }

    #[test]
    fn test_locate_raw_quote_v4() {
        let txn_data = hex::decode("unwrap();
        // println!("txn_data: {:?}", txn_data);
        let version = 4;
        let parsed_quote = locate_raw_quote(&txn_data, version);
        println!("locate_raw_quote: {:?}", parsed_quote);
    }

    #[test]
    fn test_verifyv3() {
        // let current_time = chrono::Utc::now().timestamp() as u64;

        let mut collaterals = IntelCollateral::new();
        collaterals.set_tcbinfo_bytes(include_bytes!("../data/tcbinfov2.json"));
        collaterals.set_qeidentity_bytes(include_bytes!("../data/qeidentityv2.json"));
        collaterals.set_intel_root_ca_der(include_bytes!("../data/Intel_SGX_Provisioning_Certification_RootCA.cer"));
        collaterals.set_sgx_tcb_signing_pem(include_bytes!("../data/signing_cert.pem"));
        collaterals.set_sgx_intel_root_ca_crl_der(include_bytes!("../data/intel_root_ca_crl.der"));
        collaterals.set_sgx_platform_crl_der(include_bytes!("../data/pck_platform_crl.der"));
        collaterals.set_sgx_processor_crl_der(include_bytes!("../data/pck_processor_crl.der"));


        let dcap_quote_bytes = hex::decode("030002000000000009000e00939a7233f79c4ca9940a0db3957f0607ad04024c9dfb382baf51ca3e5d6cb6e6000000000c0c100fffff0100000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000e700000000000000a4f45c39dac622cb1dd32ddb35a52ec92db41d0fa88a1c911c49e59c534f61cd00000000000000000000000000000000000000000000000000000000000000001bda23eb3a807dfe735ddcebbfa2eac05e04a00df2804296612f770b594180ba0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ca100000e78d2532cbef391dea9a477119bc505b47e187f6f045636cce8bcf41604a099232eee31b3ef3827c442eb5d5981610480deb0625ed4b01c1ac2b0fb43e05efdeab8af342a611fb608193d9a47b8111654172adf2dabd2d428d28ebe094b9baa1f8f7e240b015af174d4f58a6b201946eee2097af02ed554909779ea2d9f3c1020c0c100fffff0100000000000000000000000000000000000000000000000000000000000000000000000000000000001500000000000000e700000000000000192aa50ce1c0cef03ccf89e7b5b16b0d7978f5c2b1edcf774d87702e8154d8bf00000000000000000000000000000000000000000000000000000000000000008c4f5775d796503e96137f77c68a829a0056ac8ded70140b081b094490c57bff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a82754acc7010b3c087c6425ccf47033f711fa44776c6df3cf744864a063657b00000000000000000000000000000000000000000000000000000000000000006cf7ecfde138b32bbf6aec5e260f8bb6277cc2876ea144c3995d2afc0e6baa3525d91884672bf2832c23a6ebf85a165b45af53c836a31168ff7deaec0dd9c82c2000000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f0500620e00002d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d494945386a4343424a6d674177494241674956414b7750766270377a6f7a50754144646b792b6f526e356f36704d754d416f4743437147534d343942414d430a4d484178496a416742674e5642414d4d47556c756447567349464e4857434251513073675547786864475a76636d306751304578476a415942674e5642416f4d0a45556c756447567349454e76636e4276636d4630615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155450a4341774351304578437a414a42674e5642415954416c56544d4234584454497a4d4467794e4449784d7a557a4d6c6f5844544d774d4467794e4449784d7a557a0a4d6c6f77634445694d434147413155454177775a535735305a5777675530645949464244537942445a584a3061575a70593246305a5445614d426747413155450a43677752535735305a577767513239796347397959585270623234784644415342674e564241634d43314e68626e526849454e7359584a684d517377435159440a5651514944414a445154454c4d416b474131554542684d4356564d775754415442676371686b6a4f5051494242676771686b6a4f50514d4242774e43414154450a764b6a754b66376969723832686d2b4d5a4151452b6847643349716d53396235634e63484a754b7a5a445970626f35496a344c7a7176704f503830706f4152730a59504233594e355537704d3777644936314b66716f344944446a434341776f77487759445652306a42426777466f41556c5739647a62306234656c4153636e550a3944504f4156634c336c5177617759445652306642475177596a42676f46366758495a616148523063484d364c79396863476b7564484a316333526c5a484e6c0a636e5a705932567a4c6d6c75644756734c6d4e766253397a5a3367765932567964476c6d61574e6864476c76626939324d7939775932746a636d772f593245390a6347786864475a76636d306d5a57356a62325270626d63395a4756794d4230474131556444675157424251695a7667373930317a3171554d3874534c754358580a6571314c6f54414f42674e56485138424166384542414d434273417744415944565230544151482f4241497741444343416a734743537147534962345451454e0a41515343416977776767496f4d42344743697147534962345451454e41514545454358343464705036434c5154772f785543575448306b776767466c42676f710a686b69472b453042445145434d4949425654415142677371686b69472b45304244514543415149424444415142677371686b69472b45304244514543416749420a4444415142677371686b69472b4530424451454341774942417a415142677371686b69472b4530424451454342414942417a415242677371686b69472b4530420a4451454342514943415038774551594c4b6f5a496876684e41513042416759434167442f4d42414743797147534962345451454e41514948416745424d4241470a43797147534962345451454e41514949416745414d42414743797147534962345451454e4151494a416745414d42414743797147534962345451454e4151494b0a416745414d42414743797147534962345451454e4151494c416745414d42414743797147534962345451454e4151494d416745414d42414743797147534962340a5451454e4151494e416745414d42414743797147534962345451454e4151494f416745414d42414743797147534962345451454e41514950416745414d4241470a43797147534962345451454e41514951416745414d42414743797147534962345451454e415149524167454e4d42384743797147534962345451454e415149530a4242414d44414d442f2f38424141414141414141414141414d42414743697147534962345451454e41514d45416741414d42514743697147534962345451454e0a4151514542674267616741414144415042676f71686b69472b45304244514546436745424d42344743697147534962345451454e4151594545424531784169510a72743945363234433159516b497034775241594b4b6f5a496876684e41513042427a41324d42414743797147534962345451454e415163424151482f4d4241470a43797147534962345451454e41516343415145414d42414743797147534962345451454e41516344415145414d416f4743437147534d343942414d43413063410a4d45514349445a6f63514c6478362b4f2b586d4f6b766f6b654133345a617261342b6539534e5877344b68396d5876574169415479695a6e495932474f3466670a4938673342666c4e434f56446e42505270507559377274484e77335470513d3d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949436c6a4343416a32674177494241674956414a567658633239472b487051456e4a3150517a7a674658433935554d416f4743437147534d343942414d430a4d476778476a415942674e5642414d4d45556c756447567349464e48574342536232393049454e424d526f77474159445651514b4442464a626e526c624342440a62334a7762334a6864476c76626a45554d424947413155454277774c553246756447456751327868636d4578437a414a42674e564241674d416b4e424d5173770a435159445651514745774a56557a4165467730784f4441314d6a45784d4455774d5442614677307a4d7a41314d6a45784d4455774d5442614d484178496a41670a42674e5642414d4d47556c756447567349464e4857434251513073675547786864475a76636d306751304578476a415942674e5642416f4d45556c75644756730a49454e76636e4276636d4630615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b474131554543417743513045780a437a414a42674e5642415954416c56544d466b77457759484b6f5a497a6a3043415159494b6f5a497a6a304441516344516741454e53422f377432316c58534f0a3243757a7078773734654a423732457944476757357258437478327456544c7136684b6b367a2b5569525a436e71523770734f766771466553786c6d546c4a6c0a65546d693257597a33714f42757a43427544416642674e5648534d4547444157674251695a517a575770303069664f44744a5653763141624f536347724442530a42674e5648523845537a424a4d45656752614244686b466f64485277637a6f764c324e6c636e52705a6d6c6a5958526c63793530636e567a6447566b633256790a646d6c6a5a584d75615735305a577775593239744c306c756447567355306459556d397664454e424c6d526c636a416442674e5648513445466751556c5739640a7a62306234656c4153636e553944504f4156634c336c517744675944565230504151482f42415144416745474d42494741315564457745422f7751494d4159420a4166384341514177436759494b6f5a497a6a30454177494452774177524149675873566b6930772b6936565947573355462f32327561586530594a446a3155650a6e412b546a44316169356343494359623153416d4435786b66545670766f34556f79695359787244574c6d5552344349394e4b7966504e2b0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949436a7a4343416a53674177494241674955496d554d316c71644e496e7a6737535655723951477a6b6e42717777436759494b6f5a497a6a3045417749770a614445614d4267474131554541777752535735305a5777675530645949464a766233516751304578476a415942674e5642416f4d45556c756447567349454e760a636e4276636d4630615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155454341774351304578437a414a0a42674e5642415954416c56544d423458445445344d4455794d5445774e4455784d466f58445451354d54497a4d54497a4e546b314f566f77614445614d4267470a4131554541777752535735305a5777675530645949464a766233516751304578476a415942674e5642416f4d45556c756447567349454e76636e4276636d46300a615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155454341774351304578437a414a42674e56424159540a416c56544d466b77457759484b6f5a497a6a3043415159494b6f5a497a6a3044415163445167414543366e45774d4449595a4f6a2f69505773437a61454b69370a314f694f534c52466857476a626e42564a66566e6b59347533496a6b4459594c304d784f346d717379596a6c42616c54565978465032734a424b357a6c4b4f420a757a43427544416642674e5648534d4547444157674251695a517a575770303069664f44744a5653763141624f5363477244425342674e5648523845537a424a0a4d45656752614244686b466f64485277637a6f764c324e6c636e52705a6d6c6a5958526c63793530636e567a6447566b63325679646d6c6a5a584d75615735300a5a577775593239744c306c756447567355306459556d397664454e424c6d526c636a416442674e564851344546675155496d554d316c71644e496e7a673753560a55723951477a6b6e4271777744675944565230504151482f42415144416745474d42494741315564457745422f7751494d4159424166384341514577436759490a4b6f5a497a6a3045417749445351417752674968414f572f35516b522b533943695344634e6f6f774c7550524c735747662f59693747535839344267775477670a41694541344a306c72486f4d732b586f356f2f7358364f39515778485241765a55474f6452513763767152586171493d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a00").unwrap();
        let dcap_quote = QuoteV3::from_bytes(&dcap_quote_bytes);

        let verified_output = verify_quote_dcapv3(&dcap_quote, &collaterals, PINNED_TIME);

        println!("{:?}", verified_output);
        let root_hash = hash_x509_keccak256(&collaterals.get_sgx_intel_root_ca());
        let sign_hash = hash_x509_keccak256(&collaterals.get_sgx_tcb_signing());
        let crl_hash = hash_crl_keccak256(&collaterals.get_sgx_intel_root_ca_crl().unwrap());
        println!("{:?}", root_hash);
        println!("{:?}", sign_hash);
        println!("{:?}", crl_hash);
    }

    #[test]
    fn test_verifyv4() {
        // let current_time = chrono::Utc::now().timestamp() as u64;

        let mut collaterals = IntelCollateral::new();
        collaterals.set_tcbinfo_bytes(include_bytes!("../data/tcbinfov3_00806f050000.json"));
        collaterals.set_qeidentity_bytes(include_bytes!("../data/qeidentityv2_apiv4.json"));
        collaterals.set_intel_root_ca_der(include_bytes!("../data/Intel_SGX_Provisioning_Certification_RootCA.cer"));
        collaterals.set_sgx_tcb_signing_pem(include_bytes!("../data/signing_cert.pem"));
        collaterals.set_sgx_intel_root_ca_crl_der(include_bytes!("../data/intel_root_ca_crl.der"));
        collaterals.set_sgx_platform_crl_der(include_bytes!("../data/pck_platform_crl.der"));
        collaterals.set_sgx_processor_crl_der(include_bytes!("../data/pck_processor_crl.der"));


        let dcap_quote = QuoteV4::from_bytes(include_bytes!("../data/quote_tdx_00806f050000.dat"));

        let verified_output = verify_quote_dcapv4(&dcap_quote, &collaterals, PINNED_TIME);

        println!("{:?}", verified_output);
        let root_hash = hash_x509_keccak256(&collaterals.get_sgx_intel_root_ca());
        let sign_hash = hash_x509_keccak256(&collaterals.get_sgx_tcb_signing());
        let crl_hash = hash_crl_keccak256(&collaterals.get_sgx_intel_root_ca_crl().unwrap());
        println!("{:?}", root_hash);
        println!("{:?}", sign_hash);
        println!("{:?}", crl_hash);
    }
}